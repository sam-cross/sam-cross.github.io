{"version":3,"sources":["logo.svg","components/Header.js","helpers/setPageTitle.js","pages/Home.js","pages/Uses.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","to","React","Component","setPageTitle","_document","title","Home","document","className","href","Uses","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,2KCoB5BC,E,iLAfP,OACI,gCACI,yCACA,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,kB,GAVHC,IAAMC,WCCZC,MAJf,SAAsBC,EAAWC,GAC7BD,EAAUC,MAAQA,EAAQ,gBCgBfC,E,4LAZPH,EAAaI,SAAU,U,+BAGvB,OACI,yBAAKC,UAAU,kBAAf,8DAEI,uBAAGC,KAAK,gCAAR,uD,GARGR,IAAMC,WCqCVQ,E,4LAnCPP,EAAaI,SAAU,W,+BAGvB,OACI,yBAAKC,UAAU,kBACX,2CACA,uKAEA,wCACA,4BACI,4BAAI,sCAAJ,qBACA,4BAAI,qCAAJ,sBACA,4BAAI,uCAAJ,cACA,4BAAI,yCAAJ,qCACA,4BAAI,uCAAJ,kBAGJ,kDACA,4BACI,4BAAI,uCAAJ,oBACA,4BAAI,sCAAJ,mCACA,4BAAI,oCAAJ,cACA,4BAAI,wCAAJ,oBACA,4BAAI,6CAAJ,uBACA,4BAAI,+CAAJ,qCACA,4BAAI,yCAAJ,UACA,4BAAI,4CAAJ,aACA,4BAAI,qCAAJ,sBACA,4BAAI,qCAAJ,kB,GA9BDP,IAAMC,WCyBVS,MAjBf,WACC,OACC,yBAAKH,UAAU,OACd,kBAAC,IAAD,CAAQI,SAAS,KAChB,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOA,KAAK,SAAQ,kBAAC,EAAD,OAEpB,kBAAC,IAAD,CAAOA,KAAK,KAAI,kBAAC,EAAD,WCTDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a9afe35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1>Sam Cross</h1>\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/about\">About</Link></li>\r\n                    <li><Link to=\"/uses\">/Uses</Link></li>\r\n                    <li><Link to=\"/projects\">Projects</Link></li>\r\n                    <li><Link to=\"/contact\">Contact</Link></li>\r\n                </ul>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","function setPageTitle(_document, title) {\r\n    _document.title = title + \" | Sam Cross\";\r\n}\r\n\r\nexport default setPageTitle;","import React from 'react';\r\nimport setPageTitle from '../helpers/setPageTitle.js';\r\n\r\nclass Home extends React.Component {\r\n    componentDidMount() {\r\n        setPageTitle(document, 'Home');\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"page page-Home\">\r\n                This almost didn't exist, but I just had to add a homepage.\r\n                <a href=\"https://github.com/sam-cross\">Check out my GitHub while I work on this site.</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport setPageTitle from '../helpers/setPageTitle.js';\r\n\r\nclass Uses extends React.Component {\r\n    componentDidMount() {\r\n        setPageTitle(document, '/uses');\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"page page-Uses\">\r\n                <h1>Stuff I Use</h1>\r\n                <p>As you can see by the fact I haven't even styled this site, I'm by absolutely no means a professional, but nonetheless here's what I use</p>\r\n\r\n                <h2>Hardware</h2>\r\n                <ul>\r\n                    <li><b>Laptop:</b> Acer Aspire 5733</li>\r\n                    <li><b>Mouse:</b> Corsair Sabre RGB</li>\r\n                    <li><b>Monitor:</b> HP w2007v</li>\r\n                    <li><b>Over-ears:</b> Beyerdynamic DT 770 Pro (80 ohm)</li>\r\n                    <li><b>In-ears:</b> Sony XB510AS</li>\r\n                </ul>\r\n\r\n                <h2>Software and Stuff</h2>\r\n                <ul>\r\n                    <li><b>Browser:</b> Mozilla Firefox</li>\r\n                    <li><b>Editor:</b> VS Code (ST3 for small things)</li>\r\n                    <li><b>Font:</b> Fira Code</li>\r\n                    <li><b>Calendar:</b> Google Calendar</li>\r\n                    <li><b>Video Editing:</b> Magix Vegas Pro 17</li>\r\n                    <li><b>Package manager:</b> npm (planning to switch to yarn)</li>\r\n                    <li><b>Framework:</b> React</li>\r\n                    <li><b>Stock Images:</b> Unsplash</li>\r\n                    <li><b>Music:</b> Google Play Music</li>\r\n                    <li><b>Music:</b> Spotify</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Uses;","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Header from './components/Header.js';\r\n\r\nimport Home from './pages/Home.js';\r\nimport Uses from './pages/Uses.js';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Router basename=\"/\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\"><Home /></Route> \r\n\t\t\t\t\t<Route path=\"/uses\"><Uses /></Route>\r\n\r\n\t\t\t\t\t<Route path=\"*\"><Home /></Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}